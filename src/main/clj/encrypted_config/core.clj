(ns encrypted-config.core
  (:require [buddy.core.crypto :as crypto]
            [buddy.core.codecs :as codecs]
            [buddy.core.nonce :as nonce]
            [buddy.core.hash :as hash])
  (:gen-class))

(defn- hash-sha256
  [secret-text]
  (hash/sha256 secret-text))

;; TODO: don't use salt-key but instead use random-hex to generate salt-key
(defn- complex-encrypted
  [input-text secret-text salt-key]
  (let [encrypted-key (hash-sha256 secret-text)]
    (crypto/encrypt (codecs/to-bytes input-text)
                    encrypted-key
                    salt-key
                    {:algorithm :aes128-cbc-hmac-sha256})))

(defn encrypted-to-hex
  [input-text secret salt-key]
  (codecs/bytes->hex (complex-encrypted input-text secret salt-key)))

(defn encrypted-wrapper
  "Take the input that has been encrypted with a given secret key"
  [hex-input]
  (codecs/hex->bytes hex-input))

(defn decrypted-wrapper
  "Decrypt the given input (hex) using a given secret key.
salt-key should be generated by =(nonce/random-bytes 16)="
  [hex-input secret-key salt-key]
  (->
   (crypto/decrypt
    (encrypted-wrapper hex-input)
                   (hash-sha256 secret-key)
                   salt-key
                   {:algorithm :aes128-cbc-hmac-sha256})
   (codecs/bytes->str)))

(defn -main [& args]
  ;; (let [{:keys [options arguments errors summary]}
  ;;       (cli/parse-opts args opt/options)]
  ;;   (cond
  ;;     (:help options)
  ;;     (exit 0 (usage summary))
  ;;     (:config options)
  ;;     (create-new-repo! options)))
  ;; -------------------------------------------- ;;
  (try
    (let [input-text "MyT0pS$cr$t!"
          secret-key "$3cr3t-k$y!"
          ;; Note: origin api
          ;; salt-key (nonce/random-bytes 16)
          ;; Generate the random 16 hex input
          random-hex (crypto.random/hex 16) ;; Need to store this one!
          salt-key (codecs/hex->bytes random-hex)
          encrypted-str (encrypted-to-hex input-text secret-key salt-key)]
      (do
        (println (str "FYI: input-text     : " input-text))
        (println (str "FYI: random-hex*    : " random-hex))
        (println (str "FYI: salt-key       : " salt-key))
        (println (str "FYI: secret-key*    : " secret-key))
        (println (str "FYI: encrypted-str* : " encrypted-str)))
      (decrypted-wrapper encrypted-str secret-key salt-key))
    (catch Exception e
      (.printStackTrace e)
      (println (str "Unexpected errors: " (.getMessage e))))))
